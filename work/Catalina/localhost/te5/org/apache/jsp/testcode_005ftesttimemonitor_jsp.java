/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.0.M1
 * Generated at: 2016-03-21 08:47:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.text.*;
import com.hitachigst.prb.te.teweb.*;
import com.hitachigst.prb.itd.itdtools.util.*;
import com.hitachigst.prb.te.testtimetool.*;

public final class testcode_005ftesttimemonitor_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(7);
    _jspx_dependants.put("/testcodeprocessor/testcode_testtimechart_processor.jsp", Long.valueOf(1458544970267L));
    _jspx_dependants.put("/PageLayout/footerlayout.jsp", Long.valueOf(1455876871114L));
    _jspx_dependants.put("/PageLayout/testcode_righttoplayout.jsp", Long.valueOf(1458092814077L));
    _jspx_dependants.put("/testcodeprocessor/testcode_testtimechart_shower.jsp", Long.valueOf(1458540511901L));
    _jspx_dependants.put("/PageLayout/../testcode_topmenu.jsp", Long.valueOf(1457697117567L));
    _jspx_dependants.put("/testcodeprocessor/testcode_testtimechart_script.jsp", Long.valueOf(1458546886111L));
    _jspx_dependants.put("/PageLayout/testcode_lefttoplayout.jsp", Long.valueOf(1455876871152L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("java.text");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("com.hitachigst.prb.te.teweb");
    _jspx_imports_packages.add("com.hitachigst.prb.te.testtimetool");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("com.hitachigst.prb.itd.itdtools.util");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=TIS-620");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 30720, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\r\n");
      out.write("<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\r\n");
      out.write("<title>Test Engineer</title>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\" />\r\n");
      out.write("<meta name=\"author\" content=\"Luka Cvrk (www.solucija.com)\" />\r\n");
      out.write("<meta name=\"description\" content=\"My Site\" />\r\n");
      out.write("<meta name=\"keywords\" content=\"key, words\" />\r\n");
      out.write("\r\n");
  
String version="";
String webname="";
webname=IniFilesReader.getReturnProperties("Local.Application","Application Name"); 
version=TeWebVersionControl.getVersion();

        String errormessage="";
		String product = "";
		String reportByAllDrives = " ";
        String reportByPasserDrives = " ";
        String reportByTester = " ";
		String reportByDriveTestCode= " ";
		String reportByTestTimeTestCode = " ";
		String yaxisQty = " ";
        String yaxisYield = " ";
		String yaxisLatestYield = " ";
		String showDataTable = " ";
		int process = 0;
		int indexVector= 0;


//boolean optionSelect[3]; //= {true,false,false}; // All drives , Passer drives , by tester

    product						= request.getParameter("Product");
	reportByAllDrives 			= request.getParameter("hidden_ReportByAllDrives");
	reportByPasserDrives 		= request.getParameter("hidden_ReportByPasserDrives");
	reportByTester 				= request.getParameter("hidden_ReportByTester");
	reportByDriveTestCode		= request.getParameter("hidden_ReportByDriveTestCode");
	reportByTestTimeTestCode 	= request.getParameter("hidden_ReportByTestTimeTestCode");
	yaxisQty 					= request.getParameter("hidden_yaxisQty");
    yaxisYield 					= request.getParameter("hidden_yaxisYield");
	yaxisLatestYield 			= request.getParameter("hidden_yaxisLatestYield");
	showDataTable 				= request.getParameter("hidden_showDataTable");

	//set default product.
if(product == null){
   product = "MPS";     
}

// Set default value for ratio
if(reportByAllDrives == null && reportByPasserDrives == null && reportByTester == null  && reportByDriveTestCode == null && reportByTestTimeTestCode == null){
   reportByAllDrives = "checked"  ; 
   reportByPasserDrives = " "  ; 
   reportByTester = " "  ; 
   reportByDriveTestCode = " ";
   reportByTestTimeTestCode = " " ;
}

// Set default value for Y-AXIS ratio
if(yaxisQty == null && yaxisYield == null && yaxisLatestYield == null){
   yaxisYield = " "  ; 
   yaxisQty = "checked"  ; 
   yaxisLatestYield = " " ;
}

// Set default value for showTable CheckBox (Un-Show)
if (showDataTable == null){
showDataTable = " " ;
}


TestTimeTool ttMonitor = new TestTimeTool();
Vector mtype = ttMonitor.getMtype(product);

      out.write("\r\n");
      out.write("\r\n");
      out.write("<title>\r\n");
 out.println(webname); 
      out.write("\r\n");
      out.write("</title>\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"DATA-INF/CSS/style.css\" media=\"screen\" />\r\n");
      out.write("\r\n");
      out.write("<script src=\"JSAX-INF/amcharts.js\" type=\"text/javascript\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("function MM_reloadPage(init) {  //reloads the window if Nav4 resized\r\n");
      out.write("  if (init==true) with (navigator) {if ((appName==\"Netscape\")&&(parseInt(appVersion)==4)) {\r\n");
      out.write("    document.MM_pgW=innerWidth; document.MM_pgH=innerHeight; onresize=MM_reloadPage; }}\r\n");
      out.write("  else if (innerWidth!=document.MM_pgW || innerHeight!=document.MM_pgH) location.reload();\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("function generateChart(chartName, chartData , chartTitle, checkManualTesterType, checkAutoTesterType){\r\n");
      out.write("            var chart;\r\n");
      out.write("\t\t\tvar defaultHidden;\r\n");
      out.write("\t\t\tvar colorIndex = new Array(\"#FF0000\",\"#00FF00\",\"#0000FF\",\"#FAB800\",\"#00B3FF\",\"#EF00FF\",\"#337F00\",\"#A804C5\");\r\n");
      out.write("\t\t\tvar i = 0;\r\n");
      out.write("\t\t\t\r\n");
      out.write("            AmCharts.ready( function testTimeChart() {\r\n");
      out.write("                // SERIAL CHART\r\n");
      out.write("                chart = new AmCharts.AmSerialChart();\r\n");
      out.write("                chart.dataProvider = chartData;\r\n");
      out.write("                chart.categoryField = \"weekDate\";\r\n");
      out.write("\t\t\t\tchart.addTitle(chartTitle, 15);\r\n");
      out.write("\r\n");
      out.write("                // AXES\r\n");
      out.write("                // category axis\r\n");
      out.write("                var categoryAxis = chart.categoryAxis;\r\n");
      out.write("                //categoryAxis.parseDates = true; // as our data is date-based, we set parseDates to true\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t//categoryAxis.gridPosition = \"middle\";  // Possible values are: \"start\" and \"middle\"\r\n");
      out.write("\t\t\t\tcategoryAxis.inside = false;              \r\n");
      out.write("                categoryAxis.autoGridCount = true;\r\n");
      out.write("\t\t\t\tcategoryAxis.startOnAxis = true;\r\n");
      out.write("                categoryAxis.gridCount = 50;\r\n");
      out.write("                categoryAxis.gridAlpha = 0.1;\r\n");
      out.write("                categoryAxis.gridColor = \"#333333\";\r\n");
      out.write("                categoryAxis.axisColor = \"#555555\";\r\n");
      out.write("\t\t\t\tcategoryAxis.title = \"Week No.\"\r\n");
      out.write("\t\t\t\tcategoryAxis.addValueAxis = \"50\";\r\n");
      out.write("\t\t\t\tcategoryAxis.labelRotation = 90; // Show WeekData in Vertical side.\r\n");
      out.write("                // we want custom date formatting, so we change it in next line\r\n");
      out.write("                categoryAxis.dateFormats = [{\r\n");
      out.write("                    period: 'DD',\r\n");
      out.write("                    format: 'DD'\r\n");
      out.write("                }, {\r\n");
      out.write("                    period: 'WW',\r\n");
      out.write("                    format: 'MMM DD'\r\n");
      out.write("                }, {\r\n");
      out.write("                    period: 'MM',\r\n");
      out.write("                    format: 'MMM'\r\n");
      out.write("                }, {\r\n");
      out.write("                    period: 'YYYY',\r\n");
      out.write("                    format: 'YYYY'\r\n");
      out.write("                }];\r\n");
      out.write("\t\t\t   \r\n");
      out.write("                // as we have data of different units, we create two different value axes\r\n");
      out.write("                // test time value axis            \r\n");
      out.write("                var testTimeAxis = new AmCharts.ValueAxis();\r\n");
      out.write("                testTimeAxis.title = \"Test Time (hrs)\"; // Y left axis title\r\n");
      out.write("                testTimeAxis.gridAlpha = 0.1;\r\n");
      out.write("                testTimeAxis.axisAlpha = 50;\r\n");
      out.write("\t\t\t\ttestTimeAxis.gridColor = \"#333333\";\r\n");
      out.write("                testTimeAxis.axisColor = \"#555555\";\r\n");
      out.write("                testTimeAxis.inside = false;              \r\n");
      out.write("                chart.addValueAxis(testTimeAxis);\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t// Check If Manual Tester Type: Hidden \"Batch\" = false; and Hidden \"Mean\" = true;\r\n");
      out.write("\t\t\t\t //  else if !(Manual Type): Hidden \"Batch = True; and\"\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t        ");
if (yaxisYield.equals("checked")){
      out.write("\r\n");
      out.write("\t\t\t\t\t// Unit count value axis \r\n");
      out.write("\t\t\t\t\tvar unitCount = new AmCharts.ValueAxis();\r\n");
      out.write("\t\t\t\t\tunitCount.title = \"First Pass Yield\"; // Y right axis title\r\n");
      out.write("\t\t\t\t\tunitCount.titleRotation = 0;\r\n");
      out.write("\t\t\t\t\tunitCount.gridAlpha = 0;\r\n");
      out.write("\t\t\t\t\tunitCount.position = \"right\";\r\n");
      out.write("\t\t\t\t\tunitCount.inside = false;\r\n");
      out.write("\t\t\t\t\tunitCount.unit = \"%\";\r\n");
      out.write("\t\t\t\t\tunitCount.axisAlpha = 0;\r\n");
      out.write("\t\t\t\t\tchart.addValueAxis(unitCount);\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t");
}else if (yaxisQty.equals("checked")){
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t\t// Unit count value axis \r\n");
      out.write("\t\t\t\t\tvar unitCount = new AmCharts.ValueAxis();\r\n");
      out.write("\t\t\t\t\tunitCount.title = \"QTY\"; // Y right axis title\r\n");
      out.write("\t\t\t\t\tunitCount.titleRotation = 0;\r\n");
      out.write("\t\t\t\t\tunitCount.gridAlpha = 0;\r\n");
      out.write("\t\t\t\t\tunitCount.position = \"right\";\r\n");
      out.write("\t\t\t\t\tunitCount.inside = false;\r\n");
      out.write("\t\t\t\t\tunitCount.unit = \"unit\";\r\n");
      out.write("\t\t\t\t\tunitCount.axisAlpha = 0;\r\n");
      out.write("\t\t\t\t\tchart.addValueAxis(unitCount);\r\n");
      out.write("\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t");
}else if (yaxisLatestYield.equals ("checked")){
      out.write("\r\n");
      out.write("\t\t\t\t\t//Unit count value axis\r\n");
      out.write("\t\t\t\t\tvar unitCount = new AmCharts.ValueAxis();\r\n");
      out.write("\t\t\t\t\tunitCount.title = \"Latest Yield\"; // Y right axis title\r\n");
      out.write("\t\t\t\t\tunitCount.titleRotation = 0;\r\n");
      out.write("\t\t\t\t\tunitCount.gridAlpha = 0;\r\n");
      out.write("\t\t\t\t\tunitCount.position = \"right\";\r\n");
      out.write("\t\t\t\t\tunitCount.inside = false;\r\n");
      out.write("\t\t\t\t\tunitCount.unit = \"%\";\r\n");
      out.write("\t\t\t\t\tunitCount.axisAlpha = 0 ;\r\n");
      out.write("\t\t\t\t\tchart.addValueAxis(unitCount);\r\n");
      out.write("\t\t\t\t");
}
      out.write("\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t/************************\r\n");
      out.write("\t\t\t\t*** All Drive  report ***\r\n");
      out.write("\t\t\t\t*************************\r\n");
      out.write("\t\t\t\t************************/\r\n");
      out.write("\t\t\t\t");
if (reportByAllDrives.equals("checked")){
      out.write("\r\n");
      out.write("\t\t\t\t\t// GRAPHS\r\n");
      out.write("\t\t\t\t\t// 95% test time graph\r\n");
      out.write("\t\t\t\t\tvar tt95UnitGraph = new AmCharts.AmGraph();\r\n");
      out.write("\t\t\t\t\ttt95UnitGraph.title = \"All_95\";\r\n");
      out.write("\t\t\t\t\ttt95UnitGraph.valueField = \"all_95comp\";\r\n");
      out.write("\t\t\t\t\ttt95UnitGraph.type = \"line\";\r\n");
      out.write("\t\t\t\t\ttt95UnitGraph.valueAxis = testTimeAxis; // indicate which axis should be used\r\n");
      out.write("\t\t\t\t\ttt95UnitGraph.lineColor = colorIndex[i++] //#20B2AA;\r\n");
      out.write("\t\t\t\t\ttt95UnitGraph.balloonText = \"[[value]]\";\r\n");
      out.write("\t\t\t\t\ttt95UnitGraph.lineThickness = 1;\r\n");
      out.write("\t\t\t\t\ttt95UnitGraph.legendValueText = \"[[value]]\";\r\n");
      out.write("\t\t\t\t\ttt95UnitGraph.bullet = \"square\";\r\n");
      out.write("\t\t\t\t\ttt95UnitGraph.hidden = true;\r\n");
      out.write("\t\t\t\t\tchart.addGraph(tt95UnitGraph);\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t// 99% test time graph\r\n");
      out.write("\t\t\t\t\tvar tt99UnitGraph = new AmCharts.AmGraph();\r\n");
      out.write("\t\t\t\t\ttt99UnitGraph.title = \"All_99\";\r\n");
      out.write("\t\t\t\t\ttt99UnitGraph.valueField = \"all_99comp\";\r\n");
      out.write("\t\t\t\t\ttt99UnitGraph.type = \"line\";\r\n");
      out.write("\t\t\t\t\ttt99UnitGraph.valueAxis = testTimeAxis; // indicate which axis should be used\r\n");
      out.write("\t\t\t\t\ttt99UnitGraph.lineColor =   colorIndex[i++]; //\"#20B2AA\";\r\n");
      out.write("\t\t\t\t\ttt99UnitGraph.balloonText = \"[[value]]\";\r\n");
      out.write("\t\t\t\t\ttt99UnitGraph.lineThickness = 1;\r\n");
      out.write("\t\t\t\t\ttt99UnitGraph.legendValueText = \"[[value]]\";\r\n");
      out.write("\t\t\t\t\ttt99UnitGraph.bullet = \"square\";\r\n");
      out.write("\t\t\t\t\ttt99UnitGraph.hidden = true;\r\n");
      out.write("\t\t\t\t\tchart.addGraph(tt99UnitGraph);\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t// Mean_Unit test time graph\r\n");
      out.write("\t\t\t\t\tvar ttMeanUnitGraph = new AmCharts.AmGraph();\r\n");
      out.write("\t\t\t\t\tttMeanUnitGraph.title = \"AllMean\";\r\n");
      out.write("\t\t\t\t\tttMeanUnitGraph.valueField = \"all_mean\";\r\n");
      out.write("\t\t\t\t\tttMeanUnitGraph.type = \"line\";\r\n");
      out.write("\t\t\t\t\tttMeanUnitGraph.valueAxis = testTimeAxis; // indicate which axis should be used\r\n");
      out.write("\t\t\t\t\tttMeanUnitGraph.lineColor = colorIndex[i++]; //\"#20B2AA\";\r\n");
      out.write("\t\t\t\t\tttMeanUnitGraph.balloonText = \"[[value]]\";\r\n");
      out.write("\t\t\t\t\tttMeanUnitGraph.lineThickness = 1;\r\n");
      out.write("\t\t\t\t\tttMeanUnitGraph.legendValueText = \"[[value]]\";\r\n");
      out.write("\t\t\t\t\tttMeanUnitGraph.bullet = \"square\";\r\n");
      out.write("\t\t\t\t\tttMeanUnitGraph.hidden = checkAutoTesterType;\r\n");
      out.write("\t\t\t\t\tchart.addGraph(ttMeanUnitGraph);\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t// Min_Unit test time graph\r\n");
      out.write("\t\t\t\t\tvar ttMinUnitGraph = new AmCharts.AmGraph();\r\n");
      out.write("\t\t\t\t\tttMinUnitGraph.title = \"All_Min\";\r\n");
      out.write("\t\t\t\t\tttMinUnitGraph.valueField = \"all_min\";\r\n");
      out.write("\t\t\t\t\tttMinUnitGraph.type = \"line\";\r\n");
      out.write("\t\t\t\t\tttMinUnitGraph.valueAxis = testTimeAxis; // indicate which axis should be used\r\n");
      out.write("\t\t\t\t\tttMinUnitGraph.lineColor = colorIndex[i++]; //\"#20B2AA\";\r\n");
      out.write("\t\t\t\t\tttMinUnitGraph.balloonText = \"[[value]]\";\r\n");
      out.write("\t\t\t\t\tttMinUnitGraph.lineThickness = 1;\r\n");
      out.write("\t\t\t\t\tttMinUnitGraph.legendValueText = \"[[value]]\";\r\n");
      out.write("\t\t\t\t\tttMinUnitGraph.bullet = \"square\";\r\n");
      out.write("\t\t\t\t\tttMinUnitGraph.hidden = true;\r\n");
      out.write("\t\t\t\t\tchart.addGraph(ttMinUnitGraph);\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t// Max_Unit test time graph\r\n");
      out.write("\t\t\t\t\tvar ttMaxUnitGraph = new AmCharts.AmGraph();\r\n");
      out.write("\t\t\t\t\tttMaxUnitGraph.title = \"All_Max\";\r\n");
      out.write("\t\t\t\t\tttMaxUnitGraph.valueField = \"all_max\";\r\n");
      out.write("\t\t\t\t\tttMaxUnitGraph.type = \"line\";\r\n");
      out.write("\t\t\t\t\tttMaxUnitGraph.valueAxis = testTimeAxis; // indicate which axis should be used\r\n");
      out.write("\t\t\t\t\tttMaxUnitGraph.lineColor = colorIndex[i++]; //\"#20B2AA\";\r\n");
      out.write("\t\t\t\t\tttMaxUnitGraph.balloonText = \"[[value]]\";\r\n");
      out.write("\t\t\t\t\tttMaxUnitGraph.lineThickness = 1;\r\n");
      out.write("\t\t\t\t\tttMaxUnitGraph.legendValueText = \"[[value]]\";\r\n");
      out.write("\t\t\t\t\tttMaxUnitGraph.bullet = \"square\";\r\n");
      out.write("\t\t\t\t\tttMaxUnitGraph.hidden = true;\r\n");
      out.write("\t\t\t\t\tchart.addGraph(ttMaxUnitGraph);\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t// Sdev_Unit test time graph\r\n");
      out.write("\t\t\t\t\tvar ttSdevUnitGraph = new AmCharts.AmGraph();\r\n");
      out.write("\t\t\t\t\tttSdevUnitGraph.title = \"All_sDev\";\r\n");
      out.write("\t\t\t\t\tttSdevUnitGraph.valueField = \"all_sDev\";\r\n");
      out.write("\t\t\t\t\tttSdevUnitGraph.type = \"line\";\r\n");
      out.write("\t\t\t\t\tttSdevUnitGraph.valueAxis = testTimeAxis; // indicate which axis should be used\r\n");
      out.write("\t\t\t\t\tttSdevUnitGraph.lineColor = colorIndex[i++]; //\"#20B2AA\";\r\n");
      out.write("\t\t\t\t\tttSdevUnitGraph.balloonText = \"[[value]]\";\r\n");
      out.write("\t\t\t\t\tttSdevUnitGraph.lineThickness = 1;\r\n");
      out.write("\t\t\t\t\tttSdevUnitGraph.legendValueText = \"[[value]]\";\r\n");
      out.write("\t\t\t\t\tttSdevUnitGraph.bullet = \"square\";\r\n");
      out.write("\t\t\t\t\tttSdevUnitGraph.hidden = true;\r\n");
      out.write("\t\t\t\t\tchart.addGraph(ttSdevUnitGraph);\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t// MeanMax test time graph\r\n");
      out.write("\t\t\t\t\tvar ttMeanMaxUnitGraph = new AmCharts.AmGraph();\r\n");
      out.write("\t\t\t\t\tttMeanMaxUnitGraph.title = \"All_Batch\";\r\n");
      out.write("\t\t\t\t\tttMeanMaxUnitGraph.valueField = \"all_meanMaxByTester\";\r\n");
      out.write("\t\t\t\t\tttMeanMaxUnitGraph.type = \"line\";\r\n");
      out.write("\t\t\t\t\tttMeanMaxUnitGraph.valueAxis = testTimeAxis; // indicate which axis should be used\r\n");
      out.write("\t\t\t\t\tttMeanMaxUnitGraph.lineColor = colorIndex[i++]; //\"#20B2AA\";\r\n");
      out.write("\t\t\t\t\tttMeanMaxUnitGraph.balloonText = \"[[value]]\";\r\n");
      out.write("\t\t\t\t\tttMeanMaxUnitGraph.lineThickness = 1;\r\n");
      out.write("\t\t\t\t\tttMeanMaxUnitGraph.legendValueText = \"[[value]]\";\r\n");
      out.write("\t\t\t\t\tttMeanMaxUnitGraph.bullet = \"square\";\r\n");
      out.write("\t\t\t\t\tttMeanMaxUnitGraph.hidden = checkManualTesterType;\r\n");
      out.write("\t\t\t\t\tchart.addGraph(ttMeanMaxUnitGraph);\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t");
if (yaxisQty.equals("checked")){
      out.write("\r\n");
      out.write("\t\t\t\t\t//report QTY\r\n");
      out.write("\t\t\t\t\tvar qtyCountGraph = new AmCharts.AmGraph();\r\n");
      out.write("\t\t\t\t\tqtyCountGraph.title = \"QTY\";\r\n");
      out.write("\t\t\t\t\tqtyCountGraph.valueField = \"all_count\";\r\n");
      out.write("\t\t\t\t\tqtyCountGraph.type = \"column\"; // type: \"line\", \"column\", \"step\", \"smoothedLine\", \"candlestick\", \"ohlc\"\r\n");
      out.write("\t\t\t\t\tqtyCountGraph.fillAlphas = 0.5;\r\n");
      out.write("\t\t\t\t\tqtyCountGraph.valueAxis = unitCount; // indicate which axis should be used\r\n");
      out.write("\t\t\t\t\tqtyCountGraph.balloonText = \"[[value]]\";\r\n");
      out.write("\t\t\t\t\tqtyCountGraph.legendValueText = \"[[value]]\";\r\n");
      out.write("\t\t\t\t\tqtyCountGraph.lineColor = \"#000000\";\r\n");
      out.write("\t\t\t\t\tqtyCountGraph.lineAlpha = 0;\r\n");
      out.write("\t\t\t\t\tchart.addGraph(qtyCountGraph);\r\n");
      out.write("\t\t\t\t");
}else if (yaxisYield.equals("checked")){
      out.write("\r\n");
      out.write("\t\t\t\t\t//report First Yield\r\n");
      out.write("\t\t\t\t\tvar allFirstYieldGraph = new AmCharts.AmGraph();\r\n");
      out.write("\t\t\t\t\tallFirstYieldGraph.title = \"All_FirstYield\";\r\n");
      out.write("\t\t\t\t\tallFirstYieldGraph.valueField = \"all_firstYield\";\r\n");
      out.write("\t\t\t\t\tallFirstYieldGraph.type = \"column\";\r\n");
      out.write("\t\t\t\t\tallFirstYieldGraph.fillAlphas = 0.5;\r\n");
      out.write("\t\t\t\t\tallFirstYieldGraph.valueAxis = unitCount; // indicate which axis should be used\r\n");
      out.write("\t\t\t\t\tallFirstYieldGraph.balloonText = \"[[value]]%\";\r\n");
      out.write("\t\t\t\t\tallFirstYieldGraph.legendValueText = \"[[value]]%\";\r\n");
      out.write("\t\t\t\t\tallFirstYieldGraph.lineColor = \"#000000\";\r\n");
      out.write("\t\t\t\t\tallFirstYieldGraph.lineAlpha = 0;\r\n");
      out.write("\t\t\t\t\tchart.addGraph(allFirstYieldGraph);\r\n");
      out.write("\t\t\t\t");
}else if (yaxisLatestYield.equals("checked")){
      out.write("\r\n");
      out.write("\t\t\t\t\t//report Lastest Yield\r\n");
      out.write("\t\t\t\t\tvar allLatestYieldGraph = new AmCharts.AmGraph();\r\n");
      out.write("\t\t\t\t\tallLatestYieldGraph.title = \"All LatestYield\";\r\n");
      out.write("\t\t\t\t\tallLatestYieldGraph.valueField = \"all_latestYield\";\r\n");
      out.write("\t\t\t\t\tallLatestYieldGraph.type = \"column\";\r\n");
      out.write("\t\t\t\t\tallLatestYieldGraph.fillAlphas = 0.5;\r\n");
      out.write("\t\t\t\t\tallLatestYieldGraph.valueAxis = unitCount; // indicate which axis should be used\r\n");
      out.write("\t\t\t\t\tallLatestYieldGraph.balloonText = \"[[value]]%\";\r\n");
      out.write("\t\t\t\t\tallLatestYieldGraph.legendValueText = \"[[value]]%\";\r\n");
      out.write("\t\t\t\t\tallLatestYieldGraph.lineColor = \"#000000\";\r\n");
      out.write("\t\t\t\t\tallLatestYieldGraph.lineAlpha = 0;\r\n");
      out.write("\t\t\t\t\tchart.addGraph(allLatestYieldGraph);\r\n");
      out.write("\t\t\t\t");
}
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t//--- End Of Report By All Drive\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t/************************\r\n");
      out.write("\t\t\t\t*** START Passer Drive  report ***\r\n");
      out.write("\t\t\t\t*************************\r\n");
      out.write("\t\t\t\t************************/\r\n");
      out.write("\t\t\t\t");
} else if (reportByPasserDrives.equals("checked")){
      out.write("\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t\t// 95%_pass test time graph\r\n");
      out.write("\t\t\t\t\tvar tt95PasserGraph = new AmCharts.AmGraph();\r\n");
      out.write("\t\t\t\t\ttt95PasserGraph.title = \"Passer_95\";\r\n");
      out.write("\t\t\t\t\ttt95PasserGraph.valueField = \"passer_95comp\";\r\n");
      out.write("\t\t\t\t\ttt95PasserGraph.type = \"line\";\r\n");
      out.write("\t\t\t\t\ttt95PasserGraph.valueAxis = testTimeAxis; // indicate which axis should be used\r\n");
      out.write("\t\t\t\t\ttt95PasserGraph.lineColor = colorIndex[i++];\r\n");
      out.write("\t\t\t\t\ttt95PasserGraph.balloonText = \"[[value]]\";\r\n");
      out.write("\t\t\t\t\ttt95PasserGraph.lineThickness = 1;\r\n");
      out.write("\t\t\t\t\ttt95PasserGraph.legendValueText = \"[[value]]\";\r\n");
      out.write("\t\t\t\t\ttt95PasserGraph.bullet = \"square\";\r\n");
      out.write("\t\t\t\t\ttt95PasserGraph.hidden = true;\r\n");
      out.write("\t\t\t\t\tchart.addGraph(tt95PasserGraph);\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t// 99%_pass test time graph\r\n");
      out.write("\t\t\t\t\tvar tt99PasserGraph = new AmCharts.AmGraph();\r\n");
      out.write("\t\t\t\t\ttt99PasserGraph.title = \"Passer_99\";\r\n");
      out.write("\t\t\t\t\ttt99PasserGraph.valueField = \"passer_99comp\";\r\n");
      out.write("\t\t\t\t\ttt99PasserGraph.type = \"line\";\r\n");
      out.write("\t\t\t\t\ttt99PasserGraph.valueAxis = testTimeAxis; // indicate which axis should be used\r\n");
      out.write("\t\t\t\t\ttt99PasserGraph.lineColor = colorIndex[i++];\r\n");
      out.write("\t\t\t\t\ttt99PasserGraph.balloonText = \"[[value]]\";\r\n");
      out.write("\t\t\t\t\ttt99PasserGraph.lineThickness = 1;\r\n");
      out.write("\t\t\t\t\ttt99PasserGraph.legendValueText = \"[[value]]\";\r\n");
      out.write("\t\t\t\t\ttt99PasserGraph.bullet = \"square\";\r\n");
      out.write("\t\t\t\t\ttt99PasserGraph.hidden = true;\r\n");
      out.write("\t\t\t\t\tchart.addGraph(tt99PasserGraph);\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t// Mean_passer test time graph\r\n");
      out.write("\t\t\t\t\tvar ttMeanPasserGraph = new AmCharts.AmGraph();\r\n");
      out.write("\t\t\t\t\tttMeanPasserGraph.title = \"Passer_Mean\";\r\n");
      out.write("\t\t\t\t\tttMeanPasserGraph.valueField = \"passer_mean\";\r\n");
      out.write("\t\t\t\t\tttMeanPasserGraph.type = \"line\";\r\n");
      out.write("\t\t\t\t\tttMeanPasserGraph.valueAxis = testTimeAxis; // indicate which axis should be used\r\n");
      out.write("\t\t\t\t\tttMeanPasserGraph.lineColor = colorIndex[i++];\r\n");
      out.write("\t\t\t\t\tttMeanPasserGraph.balloonText = \"[[value]]\";\r\n");
      out.write("\t\t\t\t\tttMeanPasserGraph.lineThickness = 1;\r\n");
      out.write("\t\t\t\t\tttMeanPasserGraph.legendValueText = \"[[value]]\";\r\n");
      out.write("\t\t\t\t\tttMeanPasserGraph.bullet = \"square\";\r\n");
      out.write("\t\t\t\t\tttMeanPasserGraph.hidden = checkAutoTesterType;\r\n");
      out.write("\t\t\t\t\tchart.addGraph(ttMeanPasserGraph);\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t// Min_passer test time graph\r\n");
      out.write("\t\t\t\t\tvar ttMinPasserGraph = new AmCharts.AmGraph();\r\n");
      out.write("\t\t\t\t\tttMinPasserGraph.title = \"Passer_Min\";\r\n");
      out.write("\t\t\t\t\tttMinPasserGraph.valueField = \"passer_min\";\r\n");
      out.write("\t\t\t\t\tttMinPasserGraph.type = \"line\";\r\n");
      out.write("\t\t\t\t\tttMinPasserGraph.valueAxis = testTimeAxis; // indicate which axis should be used\r\n");
      out.write("\t\t\t\t\tttMinPasserGraph.lineColor = colorIndex[i++];//\"#006400\";\r\n");
      out.write("\t\t\t\t\tttMinPasserGraph.balloonText = \"[[value]]\";\r\n");
      out.write("\t\t\t\t\tttMinPasserGraph.lineThickness = 1;\r\n");
      out.write("\t\t\t\t\tttMinPasserGraph.legendValueText = \"[[value]]\";\r\n");
      out.write("\t\t\t\t\tttMinPasserGraph.bullet = \"square\";\r\n");
      out.write("\t\t\t\t\tttMinPasserGraph.hidden = true;\r\n");
      out.write("\t\t\t\t\tchart.addGraph(ttMinPasserGraph);\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t// Max_passer test time graph\r\n");
      out.write("\t\t\t\t\tvar ttMaxPasserGraph = new AmCharts.AmGraph();\r\n");
      out.write("\t\t\t\t\tttMaxPasserGraph.title = \"Passer_Max\";\r\n");
      out.write("\t\t\t\t\tttMaxPasserGraph.valueField = \"passer_max\";\r\n");
      out.write("\t\t\t\t\tttMaxPasserGraph.type = \"line\";\r\n");
      out.write("\t\t\t\t\tttMaxPasserGraph.valueAxis = testTimeAxis; // indicate which axis should be used\r\n");
      out.write("\t\t\t\t\tttMaxPasserGraph.lineColor = colorIndex[i++];//\"#006400\";\r\n");
      out.write("\t\t\t\t\tttMaxPasserGraph.balloonText = \"[[value]]\";\r\n");
      out.write("\t\t\t\t\tttMaxPasserGraph.lineThickness = 1;\r\n");
      out.write("\t\t\t\t\tttMaxPasserGraph.legendValueText = \"[[value]]\";\r\n");
      out.write("\t\t\t\t\tttMaxPasserGraph.bullet = \"square\";\r\n");
      out.write("\t\t\t\t\tttMaxPasserGraph.hidden = true;\r\n");
      out.write("\t\t\t\t\tchart.addGraph(ttMaxPasserGraph);\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t// Sdev_passer test time graph\r\n");
      out.write("\t\t\t\t\tvar ttSdevPasserGraph = new AmCharts.AmGraph();\r\n");
      out.write("\t\t\t\t\tttSdevPasserGraph.title = \"Passer_sDev\";\r\n");
      out.write("\t\t\t\t\tttSdevPasserGraph.valueField = \"passer_sDev\";\r\n");
      out.write("\t\t\t\t\tttSdevPasserGraph.type = \"line\";\r\n");
      out.write("\t\t\t\t\tttSdevPasserGraph.valueAxis = testTimeAxis; // indicate which axis should be used\r\n");
      out.write("\t\t\t\t\tttSdevPasserGraph.lineColor = colorIndex[i++];//\"#006400\";\r\n");
      out.write("\t\t\t\t\tttSdevPasserGraph.balloonText = \"[[value]]\";\r\n");
      out.write("\t\t\t\t\tttSdevPasserGraph.lineThickness = 1;\r\n");
      out.write("\t\t\t\t\tttSdevPasserGraph.legendValueText = \"[[value]]\";\r\n");
      out.write("\t\t\t\t\tttSdevPasserGraph.bullet = \"square\";\r\n");
      out.write("\t\t\t\t\tttSdevPasserGraph.hidden = true;\r\n");
      out.write("\t\t\t\t\tchart.addGraph(ttSdevPasserGraph);\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t// MeanMax test time graph\r\n");
      out.write("\t\t\t\t\tvar ttMeanMaxUnitGraph = new AmCharts.AmGraph();\r\n");
      out.write("\t\t\t\t\tttMeanMaxUnitGraph.title = \"Passer_Batch\";\r\n");
      out.write("\t\t\t\t\tttMeanMaxUnitGraph.valueField = \"all_meanMaxByTester\";\r\n");
      out.write("\t\t\t\t\tttMeanMaxUnitGraph.type = \"line\";\r\n");
      out.write("\t\t\t\t\tttMeanMaxUnitGraph.valueAxis = testTimeAxis; // indicate which axis should be used\r\n");
      out.write("\t\t\t\t\tttMeanMaxUnitGraph.lineColor = colorIndex[i++]; //\"#20B2AA\";\r\n");
      out.write("\t\t\t\t\tttMeanMaxUnitGraph.balloonText = \"[[value]]\";\r\n");
      out.write("\t\t\t\t\tttMeanMaxUnitGraph.lineThickness = 1;\r\n");
      out.write("\t\t\t\t\tttMeanMaxUnitGraph.legendValueText = \"[[value]]\";\r\n");
      out.write("\t\t\t\t\tttMeanMaxUnitGraph.bullet = \"square\";\r\n");
      out.write("\t\t\t\t\tttMeanMaxUnitGraph.hidden = checkManualTesterType;\r\n");
      out.write("\t\t\t\t\tchart.addGraph(ttMeanMaxUnitGraph);\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t");
if (yaxisQty.equals("checked")){
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t//report QTY\r\n");
      out.write("\t\t\t\t\tvar qtyCountGraph = new AmCharts.AmGraph();\r\n");
      out.write("\t\t\t\t\tqtyCountGraph.title = \"QTY\";\r\n");
      out.write("\t\t\t\t\tqtyCountGraph.valueField = \"passer_count\";\r\n");
      out.write("\t\t\t\t\tqtyCountGraph.type = \"column\";\r\n");
      out.write("\t\t\t\t\tqtyCountGraph.fillAlphas = 0.5;\r\n");
      out.write("\t\t\t\t\tqtyCountGraph.valueAxis = unitCount; // indicate which axis should be used\r\n");
      out.write("\t\t\t\t\tqtyCountGraph.balloonText = \"[[value]]\";\r\n");
      out.write("\t\t\t\t\tqtyCountGraph.legendValueText = \"[[value]]\";\r\n");
      out.write("\t\t\t\t\tqtyCountGraph.lineColor = \"#000000\";\r\n");
      out.write("\t\t\t\t\tqtyCountGraph.lineAlpha = 0;\r\n");
      out.write("\t\t\t\t\tchart.addGraph(qtyCountGraph);\r\n");
      out.write("\t\t\t\t");
}else if (yaxisYield.equals("checked")){
      out.write("\r\n");
      out.write("\t\t\t\t\t//report First Yield\r\n");
      out.write("\t\t\t\t\tvar passerFirstYieldGraph = new AmCharts.AmGraph();\r\n");
      out.write("\t\t\t\t\tpasserFirstYieldGraph.title = \"Passer_FirstYield\";\r\n");
      out.write("\t\t\t\t\tpasserFirstYieldGraph.valueField = \"passer_firstYield\";\r\n");
      out.write("\t\t\t\t\tpasserFirstYieldGraph.type = \"column\";\r\n");
      out.write("\t\t\t\t\tpasserFirstYieldGraph.fillAlphas = 0.5;\r\n");
      out.write("\t\t\t\t\tpasserFirstYieldGraph.valueAxis = unitCount; // indicate which axis should be used\r\n");
      out.write("\t\t\t\t\tpasserFirstYieldGraph.balloonText = \"[[value]]%\";\r\n");
      out.write("\t\t\t\t\tpasserFirstYieldGraph.legendValueText = \"[[value]]%\";\r\n");
      out.write("\t\t\t\t\tpasserFirstYieldGraph.lineColor = \"#000000\";\r\n");
      out.write("\t\t\t\t\tpasserFirstYieldGraph.lineAlpha = 0;\r\n");
      out.write("\t\t\t\t\tchart.addGraph(passerFirstYieldGraph);\r\n");
      out.write("\t\t\t\t");
}else if (yaxisLatestYield.equals("checked")){
      out.write("\r\n");
      out.write("\t\t\t\t\t//report Lastest Yield\r\n");
      out.write("\t\t\t\t\tvar passerLatestYieldGraph = new AmCharts.AmGraph();\r\n");
      out.write("\t\t\t\t\tpasserLatestYieldGraph.title = \"Passer LatestYield\";\r\n");
      out.write("\t\t\t\t\tpasserLatestYieldGraph.valueField = \"passer_latestYield\";\r\n");
      out.write("\t\t\t\t\tpasserLatestYieldGraph.type = \"column\";\r\n");
      out.write("\t\t\t\t\tpasserLatestYieldGraph.fillAlphas = 0.5;\r\n");
      out.write("\t\t\t\t\tpasserLatestYieldGraph.valueAxis = unitCount; // indicate which axis should be used\r\n");
      out.write("\t\t\t\t\tpasserLatestYieldGraph.balloonText = \"[[value]]%\";\r\n");
      out.write("\t\t\t\t\tpasserLatestYieldGraph.legendValueText = \"[[value]]%\";\r\n");
      out.write("\t\t\t\t\tpasserLatestYieldGraph.lineColor = \"#000000\";\r\n");
      out.write("\t\t\t\t\tpasserLatestYieldGraph.lineAlpha = 0;\r\n");
      out.write("\t\t\t\t\tchart.addGraph(passerLatestYieldGraph);\r\n");
      out.write("\t\t\t\t");
}
      out.write("\t\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t");
}
      out.write("\r\n");
      out.write("\t\t\t\t//End Of Report By Passer Drive\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t// MSS test time graph\r\n");
      out.write("                var mssTestTimeGraph = new AmCharts.AmGraph();\r\n");
      out.write("                mssTestTimeGraph.title = \"MSS TestTime\";\r\n");
      out.write("                mssTestTimeGraph.valueField = \"mss\";\r\n");
      out.write("                mssTestTimeGraph.type = \"line\";\r\n");
      out.write("                mssTestTimeGraph.valueAxis = testTimeAxis; // indicate which axis should be used\r\n");
      out.write("                mssTestTimeGraph.lineColor = colorIndex[i++];\r\n");
      out.write("                mssTestTimeGraph.balloonText = \"[[value]]\";\r\n");
      out.write("                mssTestTimeGraph.lineThickness = 1;\r\n");
      out.write("                mssTestTimeGraph.legendValueText = \"[[value]]\";\r\n");
      out.write("                mssTestTimeGraph.bullet = \"square\";\r\n");
      out.write("\t\t\t\tmssTestTimeGraph.hidden = false;\r\n");
      out.write("                chart.addGraph(mssTestTimeGraph);\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t/************************************************************  \r\n");
      out.write("\t\t\t\t*** Check Report QTY or First Pass Yield or Lastest Yield\r\n");
      out.write("\t\t\t\t*** Seperate by All or Passer Yield\r\n");
      out.write("\t\t\t\t*************************************************************/\r\n");
      out.write("\t\t        \r\n");
      out.write("\t\t\t\t\r\n");
      out.write("                // CURSOR                \r\n");
      out.write("                var chartCursor = new AmCharts.ChartCursor();\r\n");
      out.write("                chartCursor.zoomable = false;\r\n");
      out.write("                chartCursor.categoryBalloonDateFormat = \"DD\";\r\n");
      out.write("                chartCursor.cursorAlpha = 0;\r\n");
      out.write("                chart.addChartCursor(chartCursor);\r\n");
      out.write("\r\n");
      out.write("                // LEGEND\r\n");
      out.write("                var legend = new AmCharts.AmLegend();\r\n");
      out.write("                legend.bulletType = \"square\";\r\n");
      out.write("                legend.equalWidths = true;\r\n");
      out.write("\t\t\t\tlegend.valueWidth = 50;\r\n");
      out.write("\t\t\t\tlegend.textClickEnabled = true;\r\n");
      out.write("                legend.color = \"#000000\";\r\n");
      out.write("                chart.addLegend(legend);\r\n");
      out.write("\r\n");
      out.write("                // WRITE                                \r\n");
      out.write("                chart.write(chartName);\r\n");
      out.write("\t\t\t\t});       \r\n");
      out.write("     \r\n");
      out.write("}\t");
      out.write(" \r\n");
      out.write("MM_reloadPage(true);\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("document.write(\"<style type=\\\"text/css\\\">\");\r\n");
      out.write("document.write(\"body {margin: 0px; width:100%; height:100%;}\");\r\n");
      out.write("document.write(\"#load {position:absolute; left:0px; top:0px; width:100%; height:100%; background-color:white; z-index:300;}\");\r\n");
      out.write("document.write(\"blink.txt {font-size:15px; font-weight:bold; font-face:Arial;}\");\r\n");
      out.write("document.write(\"</style>\");\r\n");
      out.write("\r\n");
      out.write("var ie5 = (document.getElementById && document.all);\r\n");
      out.write("var ns6 = (document.getElementById && !document.all);\r\n");
      out.write("\r\n");
      out.write("function BlinkTxt() {\r\n");
      out.write("    if(ie5) {\r\n");
      out.write("     obj = document.getElementsByTagName(\"blink\");\r\n");
      out.write("     for (var j=0; j<obj.length; j++)\r\n");
      out.write("     if (obj[j].style.visibility==\"hidden\") {\r\n");
      out.write("     obj[j].style.visibility=\"visible\";\r\n");
      out.write("    }\r\n");
      out.write("    else {\r\n");
      out.write("     obj[j].style.visibility=\"hidden\";\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("}\r\n");
      out.write("setInterval(\"BlinkTxt()\",750)\r\n");
      out.write("\r\n");
      out.write("function SetUp(){\r\n");
      out.write("    if(ie5 || ns6) {\r\n");
      out.write("     document.getElementById(\"load\").style.visibility = \"hidden\";\r\n");
      out.write("    }\r\n");
      out.write("}\r\n");
      out.write("window.onload=SetUp;\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div id=\"load\">\r\n");
      out.write("          <table width=\"100%\" height=\"100%\" align=\"center\" valign=\"middle\" bgcolor=\"white\">\r\n");
      out.write("          <tr>\r\n");
      out.write("               <td width=\"100%\" height=\"100%\" align=\"center\" valign=\"middle\">\r\n");
      out.write("                    <blink class=\"txt\">Retrieving...</blink>\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("               </td>\r\n");
      out.write("          </tr>\r\n");
      out.write("          </table>\r\n");
      out.write("     </div>\r\n");
      out.write("\t\r\n");
      out.write("\r\n");
      out.write("<!-- ----------------------Te Logo--------------------------- -->\r\n");
      out.write("<div id=\"Layer1\" style=\"position:absolute; left:3px; top:3px; width:84px; height:70px; z-index:1\"><img src=\"DATA-INF/Image/telogo.jpg\" \r\n");
      out.write("\r\n");
      out.write("width=\"275\" height=\"58\" /></div> \r\n");
      out.write("<!-- -------------------------------------------------------- -->\r\n");
      out.write("<!--  <div id=\"Layer2\" style=\"position:absolute; left:460px; top:255px; width:505px; height:46px; z-index:2\"> </div>  -->\r\n");
String menumode="testcode_testtimemonitor.jsp";
      out.write(" \r\n");
      out.write("<!-- ---------------------------------Left Layout -------------- -->\r\n");
      out.write("<div id=\"contentleft\">\r\n");
      out.write("  <div id=\"left\"> \r\n");
      out.write("  ");
      out.write("\r\n");
      out.write("<!-- ============================================Top Layout============================================================================== -->\t\r\n");
      out.write(" <div id=\"header\">\r\n");
      out.write("      <table width=\"100%\" border=\"0\">\r\n");
      out.write("\t\t<tr> \r\n");
      out.write("\t\t  <td width=\"33%\"><!-- <img  src=\"DATA-INF/Image/telogo.jpg\" alt=\"Your Logo\" title=\"Your Logo\" /> --></td>\r\n");
      out.write("\t\t  <td width=\"33%\"></td>\r\n");
      out.write("\t\t  <td width=\"33%\"></td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr> \r\n");
      out.write("\t\t  <td width=\"33%\"></td>\r\n");
      out.write("\t\t  <td width=\"33%\"></td>\r\n");
      out.write("\t\t  <td width=\"34%\"></td>\r\n");
      out.write("\t\t</tr>   \t \r\n");
      out.write("     </table>  \r\n");
      out.write("\t  \r\n");
      out.write("\t</div>\r\n");
      out.write("<!-- ================================================================================================================================== -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  <div id=\"headerL\"></div>  \r\n");
      out.write("   </div> \r\n");
      out.write("\r\n");
      out.write("<!-- ============================================Top \r\n");
      out.write("\r\n");
      out.write("Layout============================================================================== -->\r\n");
      out.write("\r\n");
      out.write("<div id=\"right\"> ");
      out.write("\r\n");
      out.write("<!-- ============================================Top Layout============================================================================== -->\t\r\n");
      out.write(" <div id=\"header\">\r\n");
      out.write("      <table width=\"100%\" border=\"0\">\r\n");
      out.write("\t\t<tr> \r\n");
      out.write("\t\t  <td width=\"33%\"></td>\t\t  \r\n");
      out.write("\t\t  <td width=\"23%\"><img src=\"DATA-INF/Image/telogoempty.jpg\" alt=\"Your Logo\" title=\"Your Logo\" /></td>\r\n");
      out.write("\t\t  <td width=\"40%\"> <p>Version : ");
out.println(version); 
      out.write(" | <a href=\"#Top\">Logon: ");
out.println(session.getAttribute("s_username").toString().trim());
      out.write("</a><br /></p> </td>\t  \r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr> \r\n");
      out.write("\t\t  <td width=\"33%\"></td>\t\t  \r\n");
      out.write("\t\t  <td width=\"23%\"></td>\r\n");
      out.write("\t\t  <td width=\"40%\"></td>\r\n");
      out.write("\t\t</tr>   \t \r\n");
      out.write("     </table>  \r\n");
      out.write("     <div id=\"header-container\">\t\t  \t\r\n");
      out.write("\t\t  ");
      out.write("     <ul id=\"nav\"> \r\n");
      out.write("\t  ");

	    if (menumode.equals("testcode_home.jsp")){
	  
      out.write("\r\n");
      out.write("\t\t   <li><a href=\"home.jsp\">Home</a><li>      \r\n");
      out.write("\t\t   <li><a href=\"testcode_home.jsp\">Test Code</a>\r\n");
      out.write("\t\t   <ul>\r\n");
      out.write("                <li><a href=\"testcode_enterpriserelatedwebsite.jsp\">Enterprise Related Web site</a></li>\r\n");
      out.write("                <li><a href=\"testcode_testtimemonitor.jsp\">Test Time Monitor</a></li>\r\n");
      out.write("                 <li><a href=\"testcode_testtrialtracker.jsp\">Test Trial Tracker</a></li>\r\n");
      out.write("\t\t\t\t <li><a href=\"testcode_testtimeworkweek.jsp\">Test Time by WW</a></li>\r\n");
      out.write("          </ul>\r\n");
      out.write("\t\t  </li>\r\n");
      out.write("\t\t   <li><a href=\"Process Flow.html\">About us</a></li>      \r\n");
      out.write("\t\t   <li><a href=\"index.jsp\">Logout</a></li>  \r\n");
      out.write("\t\t   \r\n");
      out.write("\t \r\n");
      out.write("\t   ");

	   } else if (menumode.equals("testcode_enterpriserelatedwebsite.jsp")) {
	   
      out.write("\r\n");
      out.write("\t   \t   <li><a href=\"home.jsp\">Home</a><li>\r\n");
      out.write("\t\t   <li><a href=\"testcode_home.jsp\">Test Code</a>\r\n");
      out.write("\t\t   <ul>\r\n");
      out.write("                <li><a href=\"testcode_enterpriserelatedwebsite.jsp\">Enterprise Related Web site</a></li>\r\n");
      out.write("                <li><a href=\"testcode_testtimemonitor.jsp\">Test Time Monitor</a></li>\r\n");
      out.write("                 <li><a href=\"testcode_testtrialtracker.jsp\">Test Trial Tracker</a></li>\r\n");
      out.write("\t\t\t\t <li><a href=\"testcode_testtimeworkweek.jsp\">Test Time by WW</a></li>\r\n");
      out.write("          </ul>\r\n");
      out.write("\t\t  </li>\r\n");
      out.write("\t\t   <li><a href=\"Process Flow.html\">About us</a></li>      \r\n");
      out.write("\t\t   <li><a href=\"index.jsp\">Logout</a></li>    \r\n");
      out.write("\t   ");

	    }else if (menumode.equals("testcode_testtimemonitor.jsp")) {
	   
      out.write("\r\n");
      out.write("\t       <li><a href=\"home.jsp\">Home</a><li>\r\n");
      out.write("\t\t   <li><a href=\"testcode_home.jsp\">Test Code</a> \r\n");
      out.write("\t\t  <ul>\r\n");
      out.write("                <li><a href=\"testcode_enterpriserelatedwebsite.jsp\">Enterprise Related Web site</a></li>\r\n");
      out.write("                <li><a href=\"testcode_testtimemonitor.jsp\">Test Time Monitor</a></li>\r\n");
      out.write("                 <li><a href=\"testcode_testtrialtracker.jsp\">Test Trial Tracker</a></li>\r\n");
      out.write("\t\t\t\t <li><a href=\"testcode_testtimeworkweek.jsp\">Test Time by WW</a></li>\r\n");
      out.write("          </ul>\r\n");
      out.write("\t\t  </li>\t\t   \r\n");
      out.write("\t\t   <li><a href=\"Process Flow.html\">About us</a></li>      \r\n");
      out.write("\t\t   <li><a href=\"index.jsp\">Logout</a></li>    \r\n");
      out.write("\t\t");

		}else if(menumode.equals("testcode_testtrialtracker.jsp")){
		
      out.write("\r\n");
      out.write("\t\t\t<li><a href=\"home.jsp\">Home</a><li>\r\n");
      out.write("\t\t   <li><a href=\"testcode_home.jsp\">Test Code</a> \r\n");
      out.write("\t\t  <ul>\r\n");
      out.write("                <li><a href=\"testcode_enterpriserelatedwebsite.jsp\">Enterprise Related Web site</a></li>\r\n");
      out.write("                <li><a href=\"testcode_testtimemonitor.jsp\">Test Time Monitor</a></li>\r\n");
      out.write("                 <li><a href=\"testcode_testtrialtracker.jsp\">Test Trial Tracker</a></li>\r\n");
      out.write("\t\t\t\t <li><a href=\"testcode_testtimeworkweek.jsp\">Test Time by WW</a></li>\r\n");
      out.write("          </ul>\r\n");
      out.write("\t\t  </li>\t\t   \r\n");
      out.write("\t\t   <li><a href=\"Process Flow.html\">About us</a></li>      \r\n");
      out.write("\t\t   <li><a href=\"index.jsp\">Logout</a></li>\r\n");
      out.write("\t   ");

		}else if(menumode.equals("testcode_testtimeworkweek.jsp")){
		
      out.write("\r\n");
      out.write("\t\t\t<li><a href=\"home.jsp\">Home</a><li>\r\n");
      out.write("\t\t   <li><a href=\"testcode_home.jsp\">Test Code</a> \r\n");
      out.write("\t\t  <ul>\r\n");
      out.write("                <li><a href=\"testcode_enterpriserelatedwebsite.jsp\">Enterprise Related Web site</a></li>\r\n");
      out.write("                <li><a href=\"testcode_testtimemonitor.jsp\">Test Time Monitor</a></li>\r\n");
      out.write("                 <li><a href=\"testcode_testtrialtracker.jsp\">Test Trial Tracker</a></li>\r\n");
      out.write("\t\t\t\t <li><a href=\"testcode_testtimeworkweek.jsp\">Test Time by WW</a></li>\r\n");
      out.write("          </ul>\r\n");
      out.write("\t\t  </li>\t\t   \r\n");
      out.write("\t\t   <li><a href=\"Process Flow.html\">About us</a></li>      \r\n");
      out.write("\t\t   <li><a href=\"index.jsp\">Logout</a></li>\r\n");
      out.write("\t\t   ");

		}
	   
      out.write("\r\n");
      out.write("</ul>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t\t<br class=\"clear\" />\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t  </div>\t \r\n");
      out.write("\t</div>\r\n");
      out.write("\t \r\n");
      out.write("<!-- ================================================================================================================================== -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</div> \r\n");
      out.write("\r\n");
      out.write("<!-- =============================================Center \r\n");
      out.write("\r\n");
      out.write("Layout========================================================================== -->\r\n");
      out.write("\r\n");
      out.write("<form name=\"form1\" method=\"post\" action=\"\" target=\"_parent\">\r\n");
      out.write("\r\n");
      out.write("\t\t<input type=\"hidden\" name=\"Product\" value=\"");
      out.print(product);
      out.write("\">\t\r\n");
      out.write("\t\t<input type=\"hidden\" name=\"hidden_ReportByAllDrives\"  />\r\n");
      out.write("\t\t<input type=\"hidden\" name=\"hidden_ReportByPasserDrives\" />\r\n");
      out.write("\t\t<input type=\"hidden\" name=\"hidden_ReportByTester\" />\r\n");
      out.write("\t\t<input type=\"hidden\" name=\"hidden_ReportByDriveTestCode\" />\r\n");
      out.write("\t\t<input type=\"hidden\" name=\"hidden_ReportByTestTimeTestCode\" />\r\n");
      out.write("\t\t<input type=\"hidden\" name=\"hidden_yaxisQty\" />\r\n");
      out.write("\t\t<input type=\"hidden\" name=\"hidden_yaxisYield\" />\r\n");
      out.write("\t\t<input type=\"hidden\" name=\"hidden_yaxisLatestYield\" />\r\n");
      out.write("\t\t<input type=\"hidden\" name=\"hidden_showDataTable\" />\r\n");
      out.write("\t\t\r\n");
      out.write("<!-- Prepare Chart Data-->\r\n");
      out.write("<script type=\"text/JavaScript\">\r\n");

 // ----------------- Create Chart by Process ----------------------------------
	Hashtable hashTesterType = new Hashtable<Integer,Vector>(); 
	Vector processID ;
	
	//Check process No. by Product.
		if((product.equals("CBE")) || (product.equals("CBF")) || (product.equals("KCF")) ){
			//There is no Process 6600
			processID = new Vector(3, 1);
			processID.addElement(new Integer(6400));
			processID.addElement(new Integer(6800));
			processID.addElement(new Integer(9000));
		}
		else{
			//There is Process 6600
			processID = new Vector(4, 1);
			processID.addElement(new Integer(6400));
			processID.addElement(new Integer(6600));
			processID.addElement(new Integer(6800));
			processID.addElement(new Integer(9000));
		}
	
      out.write('\r');
      out.write('\n');
      out.write('	');

	for (int procIndex = 0; procIndex < processID.size(); procIndex++){
		int procID = (Integer)processID.get(procIndex);
		hashTesterType.put(procID, ttMonitor.getTesterType(product, procID));
		Vector testerType = (Vector)hashTesterType.get(procID);
		Vector testPgmVer = (Vector)ttMonitor.getTestPgmVer(product, procID);
		for ( int mtypeLoop = 0 ; mtypeLoop < mtype.size() ; mtypeLoop++){
			String mtypeName = (String)mtype.get(mtypeLoop);
			for ( int ttCount = 0 ; ttCount < testerType.size(); ttCount++){
				String testerTypeName = (String)testerType.get(ttCount);
				Vector vt   = ttMonitor.getTestTimeTrend(mtypeName,procID,testerTypeName,"ALL_PROD");
				


      out.write("\r\n");
      out.write("\t\t    var checkManualTesterType;\r\n");
      out.write("\t\t\tvar checkAutoTesterType;\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t");
if (testerTypeName.equals("XCALIBRE") || testerTypeName.equals("NEPTUNE") || testerTypeName.equals("SATTERN")){
      out.write("\r\n");
      out.write("\t\t\t\tcheckManualTesterTypeHidden = true;\r\n");
      out.write("\t\t\t\tcheckAutoTesterTypeHidden = false;\r\n");
      out.write("\t\t\t");
} else {
      out.write("\r\n");
      out.write("\t\t\t\tcheckManualTesterTypeHidden = false;\r\n");
      out.write("\t\t\t\tcheckAutoTesterTypeHidden = true;\r\n");
      out.write("\t\t\t");

			}
			
      out.write("\r\n");
      out.write("\t\t\tvar chartData = new Array();\r\n");
      out.write("\t\t\t");
 for (int vDataLoop = 0; vDataLoop < vt.size(); vDataLoop++) {
      out.write("\r\n");
      out.write("\t\t\t\r\n");
      out.write("\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tchartData[");
      out.print(vDataLoop);
      out.write("] = {\r\n");
      out.write("\t\t\t\tweekDate\t\t\t\t: ");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getWeekDate());
      out.write(",\r\n");
      out.write("\t\t\t\tproc\t\t\t\t\t: ");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getProc());
      out.write(",\r\n");
      out.write("\t\t\t\tmss\t\t\t\t\t\t: ");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getMss());
      out.write(",\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t//");
if (reportByAllDrives.equals("checked")){
      out.write("\r\n");
      out.write("\t\t\t\t\tall_firstYield\t\t\t: ");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getAll_firstYield());
      out.write(",\r\n");
      out.write("\t\t\t\t\tall_latestYield\t\t\t: ");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getAll_lastYield());
      out.write(",\r\n");
      out.write("\t\t\t\t\tall_sDev\t\t\t\t: ");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getAll_sDev());
      out.write(",\r\n");
      out.write("\t\t\t\t\tall_count\t\t\t\t: ");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getAll_count());
      out.write(",\r\n");
      out.write("\t\t\t\t\tall_min\t\t\t\t\t: ");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getAll_min());
      out.write(",\r\n");
      out.write("\t\t\t\t\tall_mean\t\t\t\t: ");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getAll_mean());
      out.write(",\r\n");
      out.write("\t\t\t\t\tall_max\t\t\t\t\t: ");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getAll_max());
      out.write(",\r\n");
      out.write("\t\t\t\t\tall_meanMaxByTester\t\t: ");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getAll_meanMaxByTester());
      out.write(",\r\n");
      out.write("\t\t\t\t\tall_99comp\t\t\t\t: ");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getAll_99comp());
      out.write(",\r\n");
      out.write("\t\t\t\t\tall_95comp\t\t\t\t: ");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getAll_95comp());
      out.write(",\r\n");
      out.write("\t\t\t\t\tall_100comp\t\t\t\t: ");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getAll_100comp());
      out.write(",\r\n");
      out.write("\t\t\t\t\tall_meanMaxByTester\t\t: ");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getAll_meanMaxByTester());
      out.write(",\r\n");
      out.write("\t\t\t\t//");
} else if (reportByPasserDrives.equals("checked")){
      out.write("\r\n");
      out.write("\t\t\t\t\tpasser_firstYield\t\t: ");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getPasser_firstYield());
      out.write(",\r\n");
      out.write("\t\t\t\t\tpasser_latestYield\t\t: ");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getPasser_latestYield());
      out.write(",\r\n");
      out.write("\t\t\t\t\tpasser_mean\t\t\t\t: ");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getPasser_mean());
      out.write(",\r\n");
      out.write("\t\t\t\t\tpasser_min\t\t\t\t: ");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getPasser_min());
      out.write(",\r\n");
      out.write("\t\t\t\t\tpasser_max\t\t\t\t: ");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getPasser_max());
      out.write(",\r\n");
      out.write("\t\t\t\t\tpasser_sDev\t\t\t\t: ");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getPasser_sDev());
      out.write(",\r\n");
      out.write("\t\t\t\t\tpasser_95comp\t\t\t: ");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getPasser_95comp());
      out.write(",\r\n");
      out.write("\t\t\t\t\tpasser_99comp\t\t\t: ");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getPasser_99comp());
      out.write(",\r\n");
      out.write("\t\t\t\t\tpasser_100comp\t\t\t: ");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getPasser_100comp());
      out.write(",\r\n");
      out.write("\t\t\t\t\tpasser_meanMaxByTester\t: ");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getPasser_meanMaxByTester());
      out.write(",\r\n");
      out.write("\t\t\t\t\tpasser_count\t\t\t: ");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getPasser_count());
      out.write(",\r\n");
      out.write("\t\t\t\t\tpasser_executeDate\t\t: ");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getExecuteDate());
      out.write(",\r\n");
      out.write("\t\t\t\t\tpasser_meanMaxByTester\t: ");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getPasser_meanMaxByTester());
      out.write(",\r\n");
      out.write("\t\t\t\t//");
}
      out.write("\r\n");
      out.write("\t\t\t};\r\n");
      out.write("\t\t\t\tgenerateChart(\"");
      out.print(procID);
      out.write('_');
      out.print(mtypeName);
      out.write('_');
      out.print(testerTypeName);
      out.write("\",chartData,\"");
      out.print((Integer)processID.get(procIndex));
      out.write(' ');
      out.print((String)mtype.get(mtypeLoop));
      out.write(' ');
      out.print((String)testerType.get(ttCount));
      out.write("\", checkManualTesterTypeHidden, checkAutoTesterTypeHidden);\r\n");
      out.write("\r\n");
      out.write("\t\t\t\r\n");
			
				}
			}
		}
	}
	
	

      out.write("\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- End of Chart Data-->\r\n");
      out.write("\r\n");
      out.write("<table width=\"100%\" border=\"0\">\r\n");
      out.write("  <tr><td align=\"center\" width=\"100%\" >\r\n");
      out.write("<div id=\"content-product-header\" align = \"left\">\r\n");
      out.write("<table width=\"100%\" border=\"0\">\r\n");
      out.write("\r\n");
      out.write("  <tr> \r\n");
      out.write("<!--Performance Product Button Loop-->\r\n");

String prodName[]    = {"kcf","cbf","cbe","mps","ar6","ar8","apk"};
String prodOnClick[] = {"KCF","CBF","CBE","MPS","AR6","AR8","APK"};
for (int prodCount = 0; prodCount < prodName.length; prodCount++){

      out.write("\r\n");
      out.write("<td align=\"center\" ><input type=\"submit\" name=\"");
      out.print(prodName[prodCount]);
      out.write("\" value=\"");
      out.print(prodOnClick[prodCount]);
      out.write("\" onclick=\"productsubmit('");
      out.print(prodOnClick[prodCount]);
      out.write("')\" style=\"width:60px\" /></td>\r\n");
      out.write("\r\n");
} 
      out.write(" <!--End of Product Button Loop-->\r\n");
      out.write("  </td></tr>\r\n");
      out.write(" <div>\r\n");
      out.write("</table>\r\n");
      out.write("</div>\r\n");
      out.write("   </td></tr>\r\n");
      out.write("<tr><td align=\"center\" width=\"100%\" ><div id=\"content-header\">");
      out.print(product);
      out.write(" Test Time Monitoring (Latest Execute Date ");
      out.print(ttMonitor.getLatestExecuteDate(product));
      out.write(")</div>\r\n");
      out.write("</td></tr>\r\n");
      out.write("<tr>\r\n");
      out.write("        <td align=\"center\" width=\"100%\" ><table width=\"70%\" border=\"0\">\r\n");
      out.write("            <tr> \r\n");
      out.write("              <td height=\"21\"><strong>Data Option</strong></td>\r\n");
      out.write("              <td height=\"21\"><strong>Y-Axis Option</strong></td>\r\n");
      out.write("              <td>&nbsp;</td>\r\n");
      out.write("            </tr>\r\n");
      out.write("            <tr> \r\n");
      out.write("              <td width=\"50%\" height=\"50\"><table width=\"100%\" border=\"0\">\r\n");
      out.write("                  <div id=\"content-product-header\"> \r\n");
      out.write("                    <tr> \r\n");
      out.write("\t\t\t\t\t\t<td > <div align=\"left\"> \r\n");
      out.write("\t\t\t\t\t\t\t<input type=\"radio\" name=\"reportOption\" id=\"byAllDrives\" value=\"byAllDrives\"  ");
      out.print(reportByAllDrives);
      out.write(" \r\n");
      out.write("\t\t\t\t\t\t\tonclick=\"applyReportOptionSubmit()\" />\r\n");
      out.write("\t\t\t\t\t\t\t\tBy All Drives </div></td>\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t<td  > <div align=\"left\"> \r\n");
      out.write("\t\t\t\t\t\t\t<input type=\"radio\" name=\"reportOption\" id=\"byPasserDrives\" value=\"byPasserDrives\" ");
      out.print(reportByPasserDrives);
      out.write(" \r\n");
      out.write("\t\t\t\t\t\t\tonclick=\"applyReportOptionSubmit()\" />\r\n");
      out.write("\t\t\t\t\t\t\t\tBy Passer Drives</div></td>\r\n");
      out.write("\t\t\t\t\t\t <!-- \r\n");
      out.write("\t\t\t\t\t\t<td > <div align =\"left\">\r\n");
      out.write("\t\t\t\t\t\t\t<font color = \"#a6a6a6\"/><input type=\"radio\" name=\"reportOption\" id=\"byTestTimeTestCode\" disabled='disabled' value=\"byTestTimeTestCode\" ");
      out.print(reportByTestTimeTestCode);
      out.write(" \r\n");
      out.write("\t\t\t\t\t\t\tonclick=\"applyReportOptionSubmit()\" />\r\n");
      out.write("\t\t\t\t\t\t\t\tBy Batch</div></td> \r\n");
      out.write("\t\t\t\t\t\t\t-->\t\r\n");
      out.write("\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t<td> <div align=\"left\"> \r\n");
      out.write("                          <input type=\"checkbox\" name=\"tableOption\" id=\"byShowDataTable\" value=\"ShowDataTable\" ");
      out.print(showDataTable);
      out.write(" \r\n");
      out.write("\t\t\t\t\t\t  onclick=\"applyReportOptionSubmit()\" />\r\n");
      out.write("                          Show Data Table</div></td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("                    <tr>\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t<!--Add Code here for 2nd Row Radio Button-->\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("                    </tr>\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("                  </div>\r\n");
      out.write("                </table></td>\r\n");
      out.write("              <td width=\"50%\"><table width=\"100%\" border=\"0\">\r\n");
      out.write("                  <div id=\"content-product-header\"> \r\n");
      out.write("                    <tr> \r\n");
      out.write("\t\t\t\t\t\t<td > <div align=\"left\"> \r\n");
      out.write("                          <input type=\"radio\" name=\"yaxisOption\" value=\"yaxisQty\"  ");
      out.print(yaxisQty);
      out.write(" onclick=\"applyReportOptionSubmit()\" />\r\n");
      out.write("                          QTY</div></td>\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t<td > <div align=\"left\"> \r\n");
      out.write("                         <input type=\"radio\" name=\"yaxisOption\" value=\"yaxisYield\" ");
      out.print(yaxisYield);
      out.write(" onclick=\"applyReportOptionSubmit()\" />\r\n");
      out.write("                          First Pass Yield</div></td>\r\n");
      out.write("\t\t\t\t\t\t  \r\n");
      out.write("\t\t\t\t\t\t<td> <div align= \"left\">\r\n");
      out.write("\t\t\t\t\t\t<input type=\"radio\" name=\"yaxisOption\" value=\"yaxisLatestYield\" ");
      out.print(yaxisLatestYield);
      out.write(" onclick=\"applyReportOptionSubmit()\" />\r\n");
      out.write("\t\t\t\t\t\tLatest Yield</div></td>      \r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("                  </div>\r\n");
      out.write("                </table></td>\r\n");
      out.write("              <td width=\"37%\"><p>&nbsp; </p></td>\r\n");
      out.write("            </tr>\r\n");
      out.write("          </table>\r\n");
      out.write("  </td>\r\n");
      out.write("      </tr>\r\n");
      out.write("\r\n");
      out.write("  <!-- **************** Plot test time chart ****************-->\r\n");
      out.write(" \r\n");
       

//---------Create Header-----------

String[] commonHeader = {"WeekData", "MTYPE", "PROC", "TestPgmVer", "TesterType", "ExecuteDate", "MSS"};
//for (int loop = 0; loop < commonHeader.length ; loop++){
//	commonHeader[loop] = "<td>" + commonHeader[loop] + "</td>";
//}

String[] allDriveHeader = {"All_FirstYield", "All_LatestYield", "All_sDev", "All_Count", "AllMean", "All_Min", "All_Max", "All_MeanMaxByTeser", "All_99", "All_95", "All_100"};
//for (int loop = 0; loop < allDriveHeader.length ; loop++){
//	allDriveHeader[loop] = "<td>" + allDriveHeader[loop] + "</td>";
//}

String[] passerDriveHeader = {"Passer_FirstYield", "Passer_LatestYield", "Passer_sDev", "Passer_Count", "PasserMean", "Passer_Min", "Passer_Max", "Passer_MeanMaxByTeser", "Passer_99", "Passer_95", "Passer_100"};
//for (int loop = 0; loop < passerDriveHeader.length ; loop++){
//	passerDriveHeader[loop] = "<td>" + passerDriveHeader[loop] + "</td>";
//}
		
 int colCount = 2; 
 Hashtable hastt2Group = new Hashtable<Integer,Object>(); 
 
for (int processIndex = 0; processIndex < processID.size(); processIndex++){ 
      out.write("\r\n");
      out.write("<tr>\r\n");
      out.write("\t<td width=\"100%\" align=\"left\">\r\n");
      out.write("\t\t<div id = \"content-Process-header\">Process ID ");
      out.print((Integer)processID.get(processIndex));
      out.write("</div>\r\n");
      out.write("\t</td>\r\n");
      out.write("</tr>\t\r\n");
      out.write("\r\n");

for (int entryCount = 0 ; entryCount < mtype.size(); entryCount++){
	  hashTesterType.put(processID.get(processIndex), ttMonitor.getTesterType(product, (Integer)processID.get(processIndex)));
	  Vector vtTesterType = (Vector)hashTesterType.get((Integer)processID.get(processIndex));
	  for ( int ttCount = 0 ; ttCount < vtTesterType.size(); ttCount+=colCount){
		String tester2TypeName = (String)vtTesterType.get(ttCount);

      out.write("\r\n");
      out.write("\t\t  <tr>\r\n");
      out.write("\t\t\t<td width=\"100%\" align=\"center\" >\r\n");
      out.write("\t\t\t\t<table width=\"100%\" border=\"0\">\r\n");
      out.write("\t\t\t\t  <tr>\r\n");
      out.write("\t\t\t\t  <td width=\"50%\"> <div id=\"");
      out.print((Integer)processID.get(processIndex));
      out.write('_');
      out.print((String)mtype.get(entryCount));
      out.write('_');
      out.print((String)vtTesterType.get(ttCount));
      out.write("\" style=\"width:100%; height:500px;\"></div></td>\r\n");
      out.write("                    ");
 if (((ttCount+1) < vtTesterType.size())){
      out.write("\r\n");
      out.write("\t\t\t\t\t    <td width=\"50%\"> <div id=\"");
      out.print((Integer)processID.get(processIndex));
      out.write('_');
      out.print((String)mtype.get(entryCount));
      out.write('_');
      out.print((String)vtTesterType.get(ttCount+1));
      out.write("\" style=\"width:100%; height:500px;\"></div></td>\r\n");
      out.write("\t\t\t\t    ");
}else{
      out.write("\r\n");
      out.write("\t\t\t\t\t    <td width=\"50%\"> </td>\r\n");
      out.write("\t\t\t\t\t");
}
      out.write("\r\n");
      out.write("\t\t\t\t  </tr>\r\n");
      out.write("\t\t\t\t</table>\r\n");
      out.write("\t\t\t</td>\r\n");
      out.write("\t\t   </tr>\r\n");
      out.write("<!--**************************************************\r\n");
      out.write("********************* Show Table *********************\r\n");
      out.write("************ Show Table If box is ticked. ************\r\n");
      out.write("***************************************************-->\r\n");
	if(showDataTable.equals("checked")){
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("<table width = \"100%\" border=\"1\" cellspacing=\"0\" border color =\"#AEAEAE\" align = \"center\">\r\n");
      out.write("\t");
 Vector vt = ttMonitor.getTestTimeTrend(product,(Integer)processID.get(processIndex),tester2TypeName,"ALL_PROD");
		if (vt.size()>0){
      out.write("\r\n");
      out.write("\t\t<div id =\"content-table-header\">Detail Table</div>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<!-- Header Zone -->\r\n");
      out.write("\t\t<tr align = \"center\" >\r\n");
      out.write("\t\t");
for (int loop = 0 ; loop < commonHeader.length; loop++){
      out.write("\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t<td><U><B>");
      out.print(commonHeader[loop]);
      out.write("</B></U></td>\r\n");
      out.write("\t\t");
} if (reportByAllDrives.equals("checked")){
      out.write("\r\n");
      out.write("\t\t\t");
for (int loop = 0 ; loop < allDriveHeader.length; loop++){
      out.write("\r\n");
      out.write("\t\t\t<td><U><B>");
      out.print(allDriveHeader[loop]);
      out.write("</B></U></td>\r\n");
      out.write("\t\t");
}
		} else if (reportByPasserDrives.equals("checked")){
      out.write("\r\n");
      out.write("\t\t\t");
for (int loop = 0 ; loop < passerDriveHeader.length; loop++){
      out.write("\r\n");
      out.write("\t\t\t<td><U><B>");
      out.print(passerDriveHeader[loop]);
      out.write("</B></U></td>\r\n");
      out.write("\t\t");
}
		}		
		
      out.write("\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<!--END OF HEADER ZONE-->\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<!-- DATA ZONE -->\r\n");
      out.write("\t\t");
 for (int vDataLoop = 0; vDataLoop < vt.size(); vDataLoop++){
      out.write("\r\n");
      out.write("\t\t\t<tr align=\"center\">\r\n");
      out.write("\t\t\t<td>");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getWeekDate());
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getMtype());
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getProc());
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getTestPgmVer());
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getTesterType());
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getExecuteDate());
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getMss());
      out.write("</td>\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t");
if (reportByAllDrives.equals("checked")){
      out.write("\r\n");
      out.write("\t\t\t<td>");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getAll_firstYield());
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getAll_lastYield());
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getAll_sDev());
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getAll_count());
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getAll_mean());
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getAll_min());
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getAll_max());
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getAll_meanMaxByTester());
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getAll_95comp());
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getAll_99comp());
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getAll_100comp());
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t");
} else if (reportByPasserDrives.equals("checked")){
      out.write("\r\n");
      out.write("\t\t\t<td>");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getPasser_firstYield());
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getPasser_latestYield());
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getPasser_sDev());
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getPasser_count());
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getPasser_mean());
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getPasser_min());
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getPasser_max());
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getPasser_meanMaxByTester());
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getPasser_95comp());
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getPasser_99comp());
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(((TestTimeMonitor) vt.get(vDataLoop)).getPasser_100comp());
      out.write("</td>\r\n");
      out.write("\t\t<!--END OF DATA ZONE-->\r\n");
      out.write("\t\t");
}
		}
      out.write("\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("</table>\r\n");
      out.write("<p style=\"border-bottom:5px double black;\"</p>\r\n");
      out.write("\r\n");

		}
		}
	  }
	}
}

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!--**************************************************\r\n");
      out.write("*******************Show Header Field******************\r\n");
      out.write("***************************************************-->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</table>\r\n");
      out.write("\r\n");
      out.write("</form> \r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<!-- =============================================footer \r\n");
      out.write("\r\n");
      out.write("Layout========================================================================== -->\r\n");
      out.write("<!-- ============================================Top Layout============================================================================== -->\t\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(" <div align = \"right\" id=\"footer\">\r\n");
      out.write("\t\t<div id=\"footercontent\" align=\"center\">\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<table align = \"center\">\t\r\n");
      out.write("\t\t&copy; HGST aWestern Digital company (Thailand) Limited. All rigths reserved\r\n");
      out.write("\t\t</table\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\r\n");
      out.write("<!-- ================================================================================================================================== -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("<script language=\"JavaScript\" src=\"JSAX-INF/utilities.js\"></script>\r\n");
      out.write("<script language=\"JavaScript\" src=\"JSAX-INF/common.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("function productsubmit(productSelected){\r\n");
      out.write("  var frm = document.form1;\r\n");
      out.write("  frm.Product.value = productSelected;\r\n");
      out.write("  checkReportOption();\r\n");
      out.write("  frm.action=\"testcode_testtimemonitor.jsp\";  \r\n");
      out.write("  frm.submit(); \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("function applyReportOptionSubmit(){\r\n");
      out.write("var frm = document.form1;\r\n");
      out.write("\r\n");
      out.write("  checkReportOption();\r\n");
      out.write("  frm.action=\"testcode_testtimemonitor.jsp\";  \r\n");
      out.write("  frm.submit(); \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("function checkReportOption(){\r\n");
      out.write("var frm = document.form1;\r\n");
      out.write("var radios = document.getElementsByTagName('input');\r\n");
      out.write("var checkBox = document.getElementById(\"byShowDataTable\");\r\n");
      out.write("\r\n");
      out.write("frm.hidden_ReportByAllDrives.value \t\t\t= ' ';\r\n");
      out.write("frm.hidden_ReportByPasserDrives.value \t\t= ' ';\r\n");
      out.write("frm.hidden_ReportByTester.value \t\t\t= ' ';\r\n");
      out.write("frm.hidden_ReportByDriveTestCode.value\t\t= ' ';\r\n");
      out.write("frm.hidden_ReportByTestTimeTestCode.value\t= ' ';\r\n");
      out.write("frm.hidden_yaxisQty.value \t\t\t\t\t= ' ';\r\n");
      out.write("frm.hidden_yaxisYield.value \t\t\t\t= ' ';\r\n");
      out.write("frm.hidden_yaxisLatestYield.value \t\t\t= ' ';\r\n");
      out.write("frm.hidden_showDataTable.value \t\t\t\t= ' ';\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("if (checkBox.checked == true){\r\n");
      out.write("frm.hidden_showDataTable.value = 'checked';\r\n");
      out.write("//  alert(\"I am an alert box **Checked**!\");\r\n");
      out.write("}\r\n");
      out.write("else if (checkBox.checked == false){\r\n");
      out.write("    frm.hidden_showDataTable.value = 'unchecked';\r\n");
      out.write("//  alert(\"I am an alert box **unChecked**!\");\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("for (var i = 0; i < radios.length; i++) {\r\n");
      out.write("    if (radios[i].type == 'radio'){\r\n");
      out.write("   \r\n");
      out.write("if (radios[i].value == 'byAllDrives'  && radios[i].checked) {\r\n");
      out.write("\tfrm.hidden_ReportByAllDrives.value = 'checked';\r\n");
      out.write("\t}\r\n");
      out.write("else if (radios[i].value == 'byPasserDrives' && radios[i].checked) {\r\n");
      out.write("\tfrm.hidden_ReportByPasserDrives.value = 'checked';\r\n");
      out.write("\t}\r\n");
      out.write("else if (radios[i].value == 'byTester' && radios[i].checked) {\r\n");
      out.write("\tfrm.hidden_ReportByTester.value = 'checked';\r\n");
      out.write("\t}\r\n");
      out.write("else if (radios[i].value =='byDriveTestCode' && radios[i].checked) {\r\n");
      out.write("\tfrm.hidden_ReportByDriveTestCode.value = 'checked';\r\n");
      out.write("\t}\t\r\n");
      out.write("else if (radios[i].value =='byTestTimeTestCode' && radios[i].checked) {\r\n");
      out.write("\tfrm.hidden_ReportByTestTimeTestCode.value = 'checked';\r\n");
      out.write("\t}\r\n");
      out.write("else if (radios[i].value == 'yaxisQty' && radios[i].checked) {\r\n");
      out.write("\tfrm.hidden_yaxisQty.value = 'checked';\r\n");
      out.write("\t}\r\n");
      out.write("else if (radios[i].value == 'yaxisYield' && radios[i].checked) {\r\n");
      out.write("\tfrm.hidden_yaxisYield.value = 'checked';\r\n");
      out.write("\t}\r\n");
      out.write("else if (radios[i].value == 'yaxisLatestYield' && radios[i].checked) {\r\n");
      out.write("\tfrm.hidden_yaxisLatestYield.value = 'checked';\r\n");
      out.write("\t}\r\n");
      out.write("\t}\r\n");
      out.write("  }\r\n");
      out.write("}\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
